class Search:
    def _init_(self):
        self.evaluation = Evaluation()

    def minimax(self, board, depth, alpha, beta, maximizing_player):
        if depth == 0:
            return self.evaluation.evaluate(board)

        if maximizing_player:
            max_eval = float('-inf')
            for move in self.generate_all_moves(board):
                board.make_move(move)
                eval = self.minimax(board, depth - 1, alpha, beta, False)
                board.undo_move(move)
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval
        else:
            min_eval = float('inf')
            for move in self.generate_all_moves(board):
                board.make_move(move)
                eval = self.minimax(board, depth - 1, alpha, beta, True)
                board.undo_move(move)
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval

    def generate_all_moves(self, board):
        moves = []
        for row in range(8):
            for col in range(8):
                if board.board[row][col] != '.':
                    moves.extend(board.get_piece_moves(row, col))
